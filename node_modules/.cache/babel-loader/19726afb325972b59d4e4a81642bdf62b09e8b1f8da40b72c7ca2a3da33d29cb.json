{"ast":null,"code":"import foodDeliveryBackEnd from './assets/images/food-delivery/food-delivery-food-controller.png';\nimport placeHolder from './assets/images/food-delivery/placeholder.jpg';\n//user \nimport userClass from './assets/images/food-delivery/User/userClass.png';\nimport userController from './assets/images/food-delivery/User/userController.png';\nimport userServiceImpl from './assets/images/food-delivery/User/UserServiceImpl.png';\nimport userRepository from './assets/images/food-delivery/User/userController.png';\n//restaurant\nimport restaurantClass from './assets/images/food-delivery/Restaurant/RestaurantClass.png';\nimport restaurantController from './assets/images/food-delivery/Restaurant/RestaurantController.png';\nimport restaurantServiceImpl from './assets/images/food-delivery/Restaurant/RestaurantServiceImpl.png';\nimport restaurantRepository from './assets/images/food-delivery/Restaurant/RestaurantRepository.png';\n//OrderFood\nimport OrderFoodClass from './assets/images/food-delivery/OrderFood/OrderFoodClass.png';\nimport OrderFoodController from './assets/images/food-delivery/OrderFood/OrderFoodController.png';\nimport OrderFoodServiceImpl from './assets/images/food-delivery/OrderFood/OrderFoodServiceIMPL.png';\nimport OrderFoodRepository from './assets/images/food-delivery/OrderFood/OrderFoodRepository.png';\n//Order\nimport OrderClass from './assets/images/food-delivery/Order/Order Class.png';\nimport OrderController from './assets/images/food-delivery/Order/Order Controller.png';\nimport OrderServiceImpl from './assets/images/food-delivery/Order/Order Service Impl.png';\nimport OrderRepository from './assets/images/food-delivery/Order/Order Repository.png';\n//Food\nimport FoodClass from './assets/images/food-delivery/Food/Food Class.png';\nimport FoodController from './assets/images/food-delivery/Food/Food Controller.png';\nimport FoodServiceImpl from './assets/images/food-delivery/Food/Food Controller.png';\nimport FoodRepository from './assets/images/food-delivery/Food/Food Repository.png';\n//Delivery Boy\nimport DeliveryBoyClass from './assets/images/food-delivery/Delivery Boy/Delivery Boy Class.png';\nimport DeliveryBoyController from './assets/images/food-delivery/Delivery Boy/Delivery Boy Controller.png';\nimport DeliveryBoyServiceImpl from './assets/images/food-delivery/Delivery Boy/Delivery Boy Service Implementation.png';\nimport DeliveryBoyRepository from './assets/images/food-delivery/Delivery Boy/Delivery Boy Repository.png';\n//Delivery\nimport DeliveryClass from './assets/images/food-Delivery/Delivery/Delivery Class.png';\nimport DeliveryController from './assets/images/food-Delivery/Delivery/Delivery Controller.png';\nimport DeliveryServiceImpl from './assets/images/food-Delivery/Delivery/Delivery Service Implementation.png';\nimport DeliveryRepository from './assets/images/food-Delivery/Delivery/Delivery Repository.png';\n//Address\nimport AddressClass from './assets/images/food-Delivery/Adress/Adress Class.png';\nimport AddressController from './assets/images/food-Delivery/Adress/Adress Controller.png';\nimport AddressServiceImpl from './assets/images/food-Delivery/Adress/Adress Service Implementation.png';\nimport AddressRepository from './assets/images/food-Delivery/Adress/Address Repository.png';\nexport const projectData = [{\n  id: 1,\n  title: \"Food Delivery Back-End | Spring Boot\",\n  gitLink: \"https://github.com/ThiagoDambroski/foodDeliveryProjectBackEnd\",\n  description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed cursus nunc eu turpis cursus, \" + \"vitae posuere ex euismod. Integer varius bibendum tristique. Sed mattis, lectus vel finibus malesuada, \\\r\n            dui purus fermentum nisi, nec lobortis velit mi sit amet felis. Praesent sodales condimentum ipsum, \\\r\n            et congue neque aliquam nec. Curabitur varius rutrum lacus, a ultrices enim. Sed elementum convallis \\\r\n            turpis a iaculis. Integer ullamcorper laoreet justo, id scelerisque elit dignissim vitae. Nam quis efficitur \\\r\n            enim. Proin malesuada efficitur convallis. Donec vulputate odio eget semper fringilla.\",\n  image: [foodDeliveryBackEnd, placeHolder],\n  type: 1,\n  // back end TYPE 2 : FRONT | TYPE 3: FULL STACK\n  informationPage: {\n    classes: ['User', 'Restaurant', 'OrderFood', 'Order', 'Food', 'DeliveryBoy', 'Delivery', 'Address'],\n    images: [[\n    //user\n    userClass, userController, userServiceImpl, userRepository], [\n    //restaurant\n    restaurantClass, restaurantController, restaurantServiceImpl, restaurantRepository], [\n    //Order Food\n    OrderFoodClass, OrderFoodController, OrderFoodServiceImpl, OrderFoodRepository], [\n    //Order\n    OrderClass, OrderController, OrderServiceImpl, OrderRepository], [\n    //Food\n    FoodClass, FoodController, FoodServiceImpl, FoodRepository], [\n    //Delivery Boy\n    DeliveryBoyClass, DeliveryBoyController, DeliveryBoyServiceImpl, DeliveryBoyRepository], [\n    //Delivery\n    DeliveryClass, DeliveryController, DeliveryServiceImpl, DeliveryRepository], [\n    //Address\n    AddressClass, AddressController, AddressServiceImpl, AddressRepository]],\n    methods: [[\n    //user\n    {\n      method: 'Get All Users',\n      URL: '/getAll',\n      description: 'Returns all users'\n    }, {\n      method: 'Get User By Id',\n      URL: '/getById/:userId',\n      description: 'Returns a user based on their id'\n    }, {\n      method: 'Get User By Name',\n      URL: '/getByName/:name',\n      description: 'Returns a list of users based on their name'\n    }, {\n      method: 'Get User By Email',\n      URL: '/getByEmail/:email',\n      description: 'Returns a user with the specified email'\n    }, {\n      method: 'Post User Admin',\n      URL: '/post/admin',\n      description: 'Post a new user with the role as \"admin\"'\n    }, {\n      method: 'Post User',\n      URL: '/post/user',\n      description: 'Post a new user with the role as \"user\"'\n    }, {\n      method: 'Post User Restaurant',\n      URL: '/post/restaurant',\n      description: 'Post a new user with the role as \"restaurant\"'\n    }, {\n      method: 'Post User Delivery',\n      URL: 'post/delivery',\n      description: 'Post a new user with the role as \"delivery\"'\n    }, {\n      method: 'Edit User',\n      URL: '/edit/:userId',\n      description: 'Edits a user based on their id'\n    }, {\n      method: 'Delete User By Id',\n      URL: '/delete/:userId',\n      description: 'Deletes a user based on their id'\n    }, {\n      method: 'Add Address',\n      URL: '/addAddress/:userId',\n      description: 'Add an address to the users address list (the address should be passed in the body)'\n    }, {\n      method: 'Edit Address',\n      URL: '/editAddress/:userId/:addressId',\n      description: 'Edits an address based on its id'\n    }], [\n    //Restaurant\n    {\n      method: 'Get All Restaurants',\n      URL: '/getAll',\n      description: 'Returns all restaurants'\n    }, {\n      method: 'Get Restaurant By Id',\n      URL: '/getById/:restaurantId',\n      description: 'Returns a restaurant based on its id'\n    }, {\n      method: 'Post Restaurant',\n      URL: '/post/:userId',\n      description: 'Post a restaurant from a user id'\n    }, {\n      method: 'Put Restaurant',\n      URL: '/put/:restaurantId',\n      description: 'Edits a restaurant based on its id'\n    }, {\n      method: 'Delete Restaurant By Id',\n      URL: '/delete/:restaurantId',\n      description: 'Deletes a restaurant based on its id'\n    }, {\n      method: 'Edit Address By Id',\n      URL: '/restaurant/edit/address/:restaurantId',\n      description: 'Edit an address based on the restaurant id'\n    }, {\n      method: 'Add an Address to a Restaurant',\n      URL: '/addAddress/:restaurantId',\n      description: 'Adds an address to a restaurant based on its ID'\n    }, {\n      method: 'Approve Delivery',\n      URL: '/approveDelivery/:restaurantId/:deliveryId',\n      description: 'restaurant needs to approve the request to avoid' + 'ingredient shortages or other complications. This method requires the restaurant ID followed by the delivery ID. Also set the status as COOKING'\n    }, {\n      method: 'Set Delivery Status as In Delivery',\n      URL: '/restaurant/inDelivery/:restaurantId/:deliveryId',\n      description: 'When the delivery driver has the order,' + 'the restaurant must update the order status. This method requires the restaurant ID followed by the delivery ID'\n    }], [\n    //OrderFood\n    {\n      method: 'Get All Orders',\n      URL: '/getAll',\n      description: 'Returns all orders'\n    }, {\n      method: 'Get Orders By User',\n      URL: '/getByUser/:userId',\n      description: 'Returns all orders made by the user'\n    }, {\n      method: 'Post Order',\n      URL: '/post/:userId/:addressId/:restaurantId',\n      description: 'To place an order, you need a list of OrderFood IDs that compose this order in ' + 'the request body. Additionally, you also need the user ID who is placing the order, followed by the address ID where the order will be delivered, and finally, ' + 'the restaurant ID from which the order is being placed'\n    }, {\n      method: 'Delete Order By Id',\n      URL: '/delete/:orderId',\n      description: 'Deletes an order based on its id'\n    }, {\n      method: 'Paid Order By Id',\n      URL: '/paidOrder/:orderId',\n      description: 'Changes the status of an order to PAID'\n    }], [\n    //Order\n    {\n      method: 'Get All Orders',\n      URL: '/getAllFoods',\n      description: 'Returns all orders'\n    }, {\n      method: 'Get Orders By User',\n      URL: '/getByUser/:userId',\n      description: 'Returns all orders made by the user'\n    }, {\n      method: 'Post Order',\n      URL: '/post/:userId/:addressId/:restaurantId',\n      description: 'To place an order, you need a list of OrderFood IDs that compose this order in the request' + 'body. Additionally, you also need the user ID who is placing the order, followed by the address ID where the order will be delivered, and finally, the restaurant ID from which ' + 'the order is being placed'\n    }, {\n      method: 'Delete Order By Id',\n      URL: '/delete/:orderId',\n      description: 'Deletes an order based on its id'\n    }, {\n      method: 'Paid Order By Id',\n      URL: '/paidOrder/:orderId',\n      description: 'Changes the status of an order to PAID'\n    }], [\n    //Food\n    {\n      method: 'Get All Foods',\n      URL: '/getAllFoods',\n      description: 'Returns all foods'\n    }, {\n      method: 'Get Food By Id',\n      URL: '/getById',\n      description: 'Returns a food based on its id'\n    }, {\n      method: 'Get Foods By Name',\n      URL: '/getByName/:name',\n      description: 'Returns a list of foods based on their name'\n    }, {\n      method: 'Get Foods By Category',\n      URL: '/getByCategory/:category',\n      description: 'Returns a list of foods based on their category'\n    }, {\n      method: 'Post Food',\n      URL: '/post/:restaurantId',\n      description: 'Post a food to a restaurant'\n    }, {\n      method: 'Put Food',\n      URL: '/put/:foodId',\n      description: 'Edits a food based on its id'\n    }, {\n      method: 'Delete Food By Id',\n      URL: '/delete/:foodId',\n      description: 'Deletes a food based on its id'\n    }], [\n    //DeliveryBoy\n    {\n      method: 'Get All DeliveryBoys',\n      URL: '/getAll',\n      description: 'Returns all delivery boys'\n    }, {\n      method: 'Get DeliveryBoy By Id',\n      URL: '/getById/:boyId',\n      description: 'Returns a delivery boy based on their id'\n    }, {\n      method: 'Post DeliveryBoy',\n      URL: '/post/:userId',\n      description: 'Post a delivery boy from a user id'\n    }, {\n      method: 'Delivery Order',\n      URL: '/deliveryAOrder/:deliveryId/:deliveryBoyId/:code',\n      description: 'Indicates that the order has been delivered, requires the Delivery Id, ' + 'DeliveryBoy Id, and the users code'\n    }, {\n      method: 'Change DeliveryBoy Region',\n      URL: '/changeBoyRegion/:boyId',\n      description: 'Change the delivery region for a delivery boy, the new region is passed in the request body'\n    }], [\n    //Delivery\n\n    {\n      method: 'Get All Deliveries',\n      URL: '/getAll',\n      description: 'Returns all deliveries'\n    }, {\n      method: 'Get Delivery by Delivery Boy Region',\n      URL: '/getByRegionDeliveryBoy/:boyId',\n      description: 'Returns deliveries based on the delivery boy region'\n    }, {\n      method: 'Get All Deliveries',\n      URL: '/getAll',\n      description: 'Returns all deliveries'\n    }, {\n      method: 'Add DeliveryBoy to Delivery',\n      URL: '/addDeliveryBoy/:deliveryId/:deliveryboyId',\n      description: 'Link a delivery boy to a delivery'\n    }], [\n    //Address\n\n    {\n      method: 'Get All Addresses',\n      URL: '/getAll',\n      description: 'Returns all addresses'\n    }, {\n      method: 'Delete Address By Id',\n      URL: '/deleteAddress/:AddressId',\n      description: 'Deletes an address based on its id'\n    }]]\n  }\n}];","map":{"version":3,"names":["foodDeliveryBackEnd","placeHolder","userClass","userController","userServiceImpl","userRepository","restaurantClass","restaurantController","restaurantServiceImpl","restaurantRepository","OrderFoodClass","OrderFoodController","OrderFoodServiceImpl","OrderFoodRepository","OrderClass","OrderController","OrderServiceImpl","OrderRepository","FoodClass","FoodController","FoodServiceImpl","FoodRepository","DeliveryBoyClass","DeliveryBoyController","DeliveryBoyServiceImpl","DeliveryBoyRepository","DeliveryClass","DeliveryController","DeliveryServiceImpl","DeliveryRepository","AddressClass","AddressController","AddressServiceImpl","AddressRepository","projectData","id","title","gitLink","description","image","type","informationPage","classes","images","methods","method","URL"],"sources":["C:/Users/dambr/OneDrive/Documentos/GitHub/React/Projetos/meu-portifolio/src/ProjectData.js"],"sourcesContent":["import foodDeliveryBackEnd from './assets/images/food-delivery/food-delivery-food-controller.png'\r\nimport placeHolder from './assets/images/food-delivery/placeholder.jpg'\r\n//user \r\nimport userClass from './assets/images/food-delivery/User/userClass.png'\r\nimport userController from './assets/images/food-delivery/User/userController.png'\r\nimport userServiceImpl from './assets/images/food-delivery/User/UserServiceImpl.png'\r\nimport userRepository from './assets/images/food-delivery/User/userController.png'\r\n//restaurant\r\nimport restaurantClass from './assets/images/food-delivery/Restaurant/RestaurantClass.png'\r\nimport restaurantController from './assets/images/food-delivery/Restaurant/RestaurantController.png'\r\nimport restaurantServiceImpl from './assets/images/food-delivery/Restaurant/RestaurantServiceImpl.png'\r\nimport restaurantRepository from './assets/images/food-delivery/Restaurant/RestaurantRepository.png'\r\n//OrderFood\r\nimport OrderFoodClass from './assets/images/food-delivery/OrderFood/OrderFoodClass.png'\r\nimport OrderFoodController from './assets/images/food-delivery/OrderFood/OrderFoodController.png'\r\nimport OrderFoodServiceImpl from './assets/images/food-delivery/OrderFood/OrderFoodServiceIMPL.png'\r\nimport OrderFoodRepository from './assets/images/food-delivery/OrderFood/OrderFoodRepository.png'\r\n//Order\r\nimport OrderClass from './assets/images/food-delivery/Order/Order Class.png'\r\nimport OrderController from './assets/images/food-delivery/Order/Order Controller.png'\r\nimport OrderServiceImpl from './assets/images/food-delivery/Order/Order Service Impl.png'\r\nimport OrderRepository from './assets/images/food-delivery/Order/Order Repository.png'\r\n//Food\r\nimport FoodClass from './assets/images/food-delivery/Food/Food Class.png'\r\nimport FoodController from './assets/images/food-delivery/Food/Food Controller.png'\r\nimport FoodServiceImpl from './assets/images/food-delivery/Food/Food Controller.png'\r\nimport FoodRepository from './assets/images/food-delivery/Food/Food Repository.png'\r\n//Delivery Boy\r\nimport DeliveryBoyClass from './assets/images/food-delivery/Delivery Boy/Delivery Boy Class.png'\r\nimport DeliveryBoyController from './assets/images/food-delivery/Delivery Boy/Delivery Boy Controller.png'\r\nimport DeliveryBoyServiceImpl from './assets/images/food-delivery/Delivery Boy/Delivery Boy Service Implementation.png'\r\nimport DeliveryBoyRepository from './assets/images/food-delivery/Delivery Boy/Delivery Boy Repository.png'\r\n//Delivery\r\nimport DeliveryClass from './assets/images/food-Delivery/Delivery/Delivery Class.png'\r\nimport DeliveryController from './assets/images/food-Delivery/Delivery/Delivery Controller.png'\r\nimport DeliveryServiceImpl from './assets/images/food-Delivery/Delivery/Delivery Service Implementation.png'\r\nimport DeliveryRepository from './assets/images/food-Delivery/Delivery/Delivery Repository.png'\r\n//Address\r\nimport AddressClass from './assets/images/food-Delivery/Adress/Adress Class.png'\r\nimport AddressController from './assets/images/food-Delivery/Adress/Adress Controller.png'\r\nimport AddressServiceImpl from './assets/images/food-Delivery/Adress/Adress Service Implementation.png'\r\nimport AddressRepository from './assets/images/food-Delivery/Adress/Address Repository.png'\r\n\r\nexport const projectData = [\r\n    {\r\n        id: 1,\r\n        title: \"Food Delivery Back-End | Spring Boot\",\r\n        gitLink: \"https://github.com/ThiagoDambroski/foodDeliveryProjectBackEnd\",\r\n        description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed cursus nunc eu turpis cursus, \" +\r\n            \"vitae posuere ex euismod. Integer varius bibendum tristique. Sed mattis, lectus vel finibus malesuada, \\\r\n            dui purus fermentum nisi, nec lobortis velit mi sit amet felis. Praesent sodales condimentum ipsum, \\\r\n            et congue neque aliquam nec. Curabitur varius rutrum lacus, a ultrices enim. Sed elementum convallis \\\r\n            turpis a iaculis. Integer ullamcorper laoreet justo, id scelerisque elit dignissim vitae. Nam quis efficitur \\\r\n            enim. Proin malesuada efficitur convallis. Donec vulputate odio eget semper fringilla.\",\r\n        image: [foodDeliveryBackEnd,placeHolder],\r\n        type: 1, // back end TYPE 2 : FRONT | TYPE 3: FULL STACK\r\n        informationPage: {\r\n            classes: ['User','Restaurant','OrderFood','Order','Food','DeliveryBoy','Delivery','Address'],\r\n            images:[\r\n                [//user\r\n                    userClass,userController,userServiceImpl,userRepository\r\n                ],\r\n                [//restaurant\r\n                    restaurantClass,restaurantController,restaurantServiceImpl,restaurantRepository\r\n                ],\r\n                [//Order Food\r\n                    OrderFoodClass,OrderFoodController,OrderFoodServiceImpl,OrderFoodRepository\r\n\r\n                ],\r\n                [//Order\r\n                    OrderClass,OrderController,OrderServiceImpl,OrderRepository\r\n                \r\n                ],\r\n                [//Food\r\n                    FoodClass,FoodController,FoodServiceImpl,FoodRepository\r\n                ],\r\n                [//Delivery Boy\r\n                    DeliveryBoyClass,DeliveryBoyController,DeliveryBoyServiceImpl,DeliveryBoyRepository\r\n                ],\r\n                [//Delivery\r\n                    DeliveryClass,DeliveryController,DeliveryServiceImpl,DeliveryRepository\r\n                ],\r\n                [//Address\r\n                    AddressClass,AddressController,AddressServiceImpl,AddressRepository\r\n                ]\r\n\r\n            ],\r\n            methods:[\r\n                [//user\r\n                    {method: 'Get All Users', URL: '/getAll',description: 'Returns all users'},\r\n                    {method: 'Get User By Id',URL: '/getById/:userId',description: 'Returns a user based on their id'},\r\n                    {method: 'Get User By Name',URL: '/getByName/:name',description: 'Returns a list of users based on their name'},\r\n                    {method: 'Get User By Email',URL: '/getByEmail/:email',description: 'Returns a user with the specified email'},\r\n                    {method: 'Post User Admin',URL: '/post/admin',description: 'Post a new user with the role as \"admin\"'},\r\n                    {method: 'Post User',URL: '/post/user',description: 'Post a new user with the role as \"user\"'},\r\n                    {method: 'Post User Restaurant',URL: '/post/restaurant',description: 'Post a new user with the role as \"restaurant\"'},\r\n                    {method: 'Post User Delivery',URL: 'post/delivery',description: 'Post a new user with the role as \"delivery\"'},\r\n                    {method: 'Edit User',URL: '/edit/:userId',description: 'Edits a user based on their id'},\r\n                    {method: 'Delete User By Id',URL: '/delete/:userId',description: 'Deletes a user based on their id'},\r\n                    {method: 'Add Address',URL: '/addAddress/:userId',description: 'Add an address to the users address list (the address should be passed in the body)'},\r\n                    {method: 'Edit Address',URL: '/editAddress/:userId/:addressId',description: 'Edits an address based on its id'}\r\n                ]\r\n                ,[//Restaurant\r\n                    {method: 'Get All Restaurants', URL: '/getAll',description: 'Returns all restaurants'},\r\n                    {method: 'Get Restaurant By Id', URL: '/getById/:restaurantId',description: 'Returns a restaurant based on its id'},\r\n                    {method: 'Post Restaurant', URL: '/post/:userId',description: 'Post a restaurant from a user id'}, \r\n                    {method: 'Put Restaurant', URL: '/put/:restaurantId',description: 'Edits a restaurant based on its id'},\r\n                    {method: 'Delete Restaurant By Id', URL: '/delete/:restaurantId',description: 'Deletes a restaurant based on its id'},\r\n                    {method: 'Edit Address By Id', URL: '/restaurant/edit/address/:restaurantId',description: 'Edit an address based on the restaurant id'},\r\n                    {method: 'Add an Address to a Restaurant', URL: '/addAddress/:restaurantId',description: 'Adds an address to a restaurant based on its ID'},\r\n                    {method: 'Approve Delivery', URL: '/approveDelivery/:restaurantId/:deliveryId',description: 'restaurant needs to approve the request to avoid'\r\n                    + 'ingredient shortages or other complications. This method requires the restaurant ID followed by the delivery ID. Also set the status as COOKING'}, \r\n                    {method: 'Set Delivery Status as In Delivery', URL: '/restaurant/inDelivery/:restaurantId/:deliveryId',description: 'When the delivery driver has the order,'\r\n                    + 'the restaurant must update the order status. This method requires the restaurant ID followed by the delivery ID'}\r\n                ]\r\n                ,[//OrderFood\r\n                    {method: 'Get All Orders', URL: '/getAll',description: 'Returns all orders'},\r\n                    {method: 'Get Orders By User', URL: '/getByUser/:userId',description: 'Returns all orders made by the user'},\r\n                    {method: 'Post Order', URL: '/post/:userId/:addressId/:restaurantId',description: 'To place an order, you need a list of OrderFood IDs that compose this order in '\r\n                    + 'the request body. Additionally, you also need the user ID who is placing the order, followed by the address ID where the order will be delivered, and finally, ' +\r\n                    'the restaurant ID from which the order is being placed'},\r\n                    {method: 'Delete Order By Id', URL: '/delete/:orderId',description: 'Deletes an order based on its id'},\r\n                    {method: 'Paid Order By Id', URL: '/paidOrder/:orderId',description: 'Changes the status of an order to PAID'}\r\n\r\n                ]\r\n                ,[//Order\r\n                    {method: 'Get All Orders',URL: '/getAllFoods',description: 'Returns all orders'},\r\n                    {method: 'Get Orders By User',URL: '/getByUser/:userId',description: 'Returns all orders made by the user'},\r\n                    {method: 'Post Order',URL: '/post/:userId/:addressId/:restaurantId',description: 'To place an order, you need a list of OrderFood IDs that compose this order in the request'\r\n                     + 'body. Additionally, you also need the user ID who is placing the order, followed by the address ID where the order will be delivered, and finally, the restaurant ID from which '\r\n                     + 'the order is being placed'},  \r\n                    {method: 'Delete Order By Id',URL: '/delete/:orderId',description: 'Deletes an order based on its id'},   \r\n                    {method: 'Paid Order By Id',URL: '/paidOrder/:orderId',description: 'Changes the status of an order to PAID'},               \r\n                ]\r\n                ,[//Food\r\n                    {method: 'Get All Foods',URL: '/getAllFoods',description: 'Returns all foods'},\r\n                    {method: 'Get Food By Id',URL: '/getById',description: 'Returns a food based on its id'},\r\n                    {method: 'Get Foods By Name',URL: '/getByName/:name',description: 'Returns a list of foods based on their name'},\r\n                    {method: 'Get Foods By Category',URL: '/getByCategory/:category',description: 'Returns a list of foods based on their category'},\r\n                    {method: 'Post Food',URL: '/post/:restaurantId',description: 'Post a food to a restaurant'},\r\n                    {method: 'Put Food',URL: '/put/:foodId',description: 'Edits a food based on its id'},\r\n                    {method: 'Delete Food By Id',URL: '/delete/:foodId',description: 'Deletes a food based on its id'},\r\n                ]\r\n                ,[//DeliveryBoy\r\n                    {method: 'Get All DeliveryBoys',URL: '/getAll',description: 'Returns all delivery boys'},\r\n                    {method: 'Get DeliveryBoy By Id',URL: '/getById/:boyId',description: 'Returns a delivery boy based on their id'},\r\n                    {method: 'Post DeliveryBoy',URL: '/post/:userId',description: 'Post a delivery boy from a user id'},\r\n                    {method: 'Delivery Order',URL: '/deliveryAOrder/:deliveryId/:deliveryBoyId/:code',description: 'Indicates that the order has been delivered, requires the Delivery Id, '\r\n                    + 'DeliveryBoy Id, and the users code'},\r\n                    {method: 'Change DeliveryBoy Region',URL: '/changeBoyRegion/:boyId',description: 'Change the delivery region for a delivery boy, the new region is passed in the request body'}\r\n                ]\r\n                ,[//Delivery\r\n                    \r\n                    {method: 'Get All Deliveries',URL: '/getAll',description: 'Returns all deliveries'},\r\n                    {method: 'Get Delivery by Delivery Boy Region',URL: '/getByRegionDeliveryBoy/:boyId',description: 'Returns deliveries based on the delivery boy region'},\r\n                    {method: 'Get All Deliveries',URL: '/getAll',description: 'Returns all deliveries'},\r\n                    {method: 'Add DeliveryBoy to Delivery',URL: '/addDeliveryBoy/:deliveryId/:deliveryboyId',description: 'Link a delivery boy to a delivery'}\r\n                ]\r\n                ,[//Address\r\n\r\n                    {method: 'Get All Addresses',URL: '/getAll',description: 'Returns all addresses'},\r\n                    {method: 'Delete Address By Id',URL: '/deleteAddress/:AddressId',description: 'Deletes an address based on its id'}\r\n\r\n                ]\r\n            ]\r\n            \r\n        }\r\n    }\r\n    \r\n\r\n\r\n]"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}